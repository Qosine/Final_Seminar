source_data = read.csv("./cleaned_unified_sample.csv")
simulated_population = load("./simulated_target_population.RData")
load("./simulated_target_population.RData")
load("./simulated_target_population.RData")
## TEST SCRIPT
path = "D:/brian/Documents/EUR/19-20 Business Analytics and QM/Block 3/Seminar Case Studies/Data"
setwd(path)
load("./simulated_target_population.RData")
## TEST SCRIPT
path = "D:\brian\Documents\EUR\19-20 Business Analytics and QM\Block 3\Seminar Case Studies\Git\Seminar"
## TEST SCRIPT
path = "D:/brian/Documents/EUR/19-20 Business Analytics and QM/Block 3/Seminar Case Studies/Git/Seminar"
setwd(path)
source_data = read.csv("./cleaned_unified_sample.csv")
simulated_targets = load("./simulated_target_population.RData")
simulated_targets
simulated_targets = load("./simulated_target_population.RData")[simulated_population]
load("D:/brian/Documents/EUR/19-20 Business Analytics and QM/Block 3/Seminar Case Studies/Git/Seminar/simulated_target_population.RData")
simulated_targets = load("./simulated_target_population.RData")
simulated_targets = load("./simulated_target_population.RData")[,simulated_population]
simulated_targets = load("./simulated_target_population.RData")[1,simulated_population]
load("./simulated_target_population.RData")
rm(simulated_tarfgets)
rm(simulated_targets)
rm(simulated_population)
load("./simulated_target_population.RData")
View(simulated_population)
View(simulated_population)
simulated_population[:,7] = 1.0
simulated_population[,7] = 1.0
constant = c(1, nrow=5000)
simulated_population = cbind(constant, simulated_population)
View(simulated_population)
View(simulated_population)
rm(simulated_population)
load("./simulated_target_population.RData")
constant = rep(1, nrow(simulated_population))
simulated_population = cbind(constant, simulated_population)
View(simulated_population)
View(simulated_population)
subsamples = split_sample(source_data)
set.seed(200127)
library(mvtnorm)
library(simcausal)
library(dplyr)
## SETUP ##
split_sample <- function(data,
target_gender_m=TRUE, # target audience M/F? M = TRUE
min_age=25, # min_age and max_age are INCLUSIVE
max_age=34) {
if (target_gender_m==TRUE) {target_gender="male"} else {target_gender="female"}
target_sample = data[ ( data["sd_gender"]==target_gender
& data["sd_age"]>=min_age
& data["sd_age"]<=max_age ), ]
nontarget_sample = setdiff(data, target_sample)
out = list(); out$target = target_sample; out$nontarget = nontarget_sample
return (out)
}
## EXPLANATORY VARIABLES / PREDICTORS ##
create_predictors_responses <- function(subsample) {
# Extract columns of interest
df_contacts = subsample[,93:182]
v_familiarity = subsample[,22]
v_awareness = subsample[,23]
v_consideration = subsample[,24]
# Sum across categories
v_audiosum = rowSums(df_contacts[,1:5])
v_digitalsum = rowSums(df_contacts[,6:12])
v_programsum = df_contacts[,13]
v_tvsum = rowSums(df_contacts[,14:81])
v_vodsum = rowSums(df_contacts[,82:89])
v_yousum = df_contacts[,90]
# Return single argument with predictor and response values
out = list()
out$predictors = cbind(v_audiosum, v_digitalsum, v_programsum, v_tvsum,
v_vodsum, v_yousum)
out$familiarity = v_familiarity
out$awareness = v_awareness
out$consideration = v_consideration
return(out)
}
## ESTIMATE PARAMETERS FOR DGP ##
estimate_params <- function(true_predictors, true_outcomes) {
logit <- glm( true_outcomes ~ true_predictors, family=binomial(link="logit") )
true_params <- logit_real_data$coefficients[,1]
return (true_params)
}
## DEPENDENT VARIABLES / OUTCOMES ##
sigmoid_function <- function(x) 1/(1+exp(-x))
generate_outcomes <- function(predictors, parameters, sample_size) {
Pr_success <- sigmoid_function( predictors%*%parameters ) # compute Pr(Y=1 | X=x)
outcomes <- rbern( n=sample_size, prob=Pr_success ) # draw from corresponding Bernoulli distribution
return (outcomes)
}
subsamples = split_sample(source_data)
target_sample = subsamples$target
target_variables = create_predictors_responses(target_sample)
logit.target.familiarity <- glm( target_variables$familiarity
~ target_variables$predictors,
family=binomial(link="logit") )
beta_target_familiarity = logit.target.familiarity$coefficients
beta_target_familiarity
length(beta_target_familiarity)
unname(logit.target.familiarity$coefficients)
sim_target_familiarity = generate_outcomes(simulated_population,
beta_target_familiarity,
nrow(simulated_population))
summary(sim_target_familiarity)
mean(target_variables$familiarity)
beta_target_awareness = logit.target.awareness$coefficients
beta_target_consideration = logit.target.consideration$coefficients
logit.target.familiarity <- glm( target_variables$familiarity
~ target_variables$predictors,
family=binomial(link="logit") )
logit.target.awareness <- glm( target_variables$awareness
~ target_variables$predictors,
family=binomial(link="logit") )
logit.target.consideration <- glm( target_variables$consideration
~ target_variables$predictors,
family=binomial(link="logit") )
beta_target_familiarity = logit.target.familiarity$coefficients
beta_target_awareness = logit.target.awareness$coefficients
beta_target_consideration = logit.target.consideration$coefficients
sim_target_awareness = generate_outcomes(simulated_population,
beta_target_awareness,
nrow(simulated_population))
sim_target_consideration = generate_outcomes(simulated_population,
beta_target_consideration,
nrow(simulated_population))
print("test")
for ( kpi in c("familiarity", "awareness", "consideration") ) {
print( paste("True mean of ", kpi, ": ", sim_target_variables$kpi) )
}
## TEST SCRIPT
path = "D:/brian/Documents/EUR/19-20 Business Analytics and QM/Block 3/Seminar Case Studies/Git/Seminar"
setwd(path)
source_data = read.csv("./cleaned_unified_sample.csv")
load("./simulated_target_population.RData")
constant = rep(1, nrow(simulated_population))
sim_target_variables = list()
sim_target_variables$predictors = cbind(constant, simulated_population)
subsamples = split_sample(source_data)
target_sample = subsamples$target
true_target_variables = create_predictors_responses(target_sample)
logit.target.familiarity <- glm( true_target_variables$familiarity
~ true_target_variables$predictors,
family=binomial(link="logit") )
logit.target.awareness <- glm( true_target_variables$awareness
~ true_target_variables$predictors,
family=binomial(link="logit") )
logit.target.consideration <- glm( true_target_variables$consideration
~ true_target_variables$predictors,
family=binomial(link="logit") )
sim_target_variables$familiarity = generate_outcomes(simulated_population,
logit.target.familiarity$coefficients,
nrow(simulated_population))
sim_target_variables$awareness = generate_outcomes(simulated_population,
logit.target.awareness$coefficients,
nrow(simulated_population))
sim_target_variables$consideration = generate_outcomes(simulated_population,
logit.target.consideration$coefficients,
nrow(simulated_population))
set.seed(200127)
library(mvtnorm)
library(simcausal)
library(dplyr)
## SETUP ##
split_sample <- function(data,
target_gender_m=TRUE, # target audience M/F? M = TRUE
min_age=25, # min_age and max_age are INCLUSIVE
max_age=34) {
if (target_gender_m==TRUE) {target_gender="male"} else {target_gender="female"}
target_sample = data[ ( data["sd_gender"]==target_gender
& data["sd_age"]>=min_age
& data["sd_age"]<=max_age ), ]
nontarget_sample = setdiff(data, target_sample)
out = list(); out$target = target_sample; out$nontarget = nontarget_sample
return (out)
}
## EXPLANATORY VARIABLES / PREDICTORS ##
create_predictors_responses <- function(subsample) {
# Extract columns of interest
df_contacts = subsample[,93:182]
v_familiarity = subsample[,22]
v_awareness = subsample[,23]
v_consideration = subsample[,24]
# Sum across categories
v_audiosum = rowSums(df_contacts[,1:5])
v_digitalsum = rowSums(df_contacts[,6:12])
v_programsum = df_contacts[,13]
v_tvsum = rowSums(df_contacts[,14:81])
v_vodsum = rowSums(df_contacts[,82:89])
v_yousum = df_contacts[,90]
# Return single argument with predictor and response values
out = list()
out$predictors = cbind(v_audiosum, v_digitalsum, v_programsum, v_tvsum,
v_vodsum, v_yousum)
out$familiarity = v_familiarity
out$awareness = v_awareness
out$consideration = v_consideration
return(out)
}
## ESTIMATE PARAMETERS FOR DGP ##
estimate_params <- function(true_predictors, true_outcomes) {
logit <- glm( true_outcomes ~ true_predictors, family=binomial(link="logit") )
true_params <- logit_real_data$coefficients[,1]
return (true_params)
}
## DEPENDENT VARIABLES / OUTCOMES ##
sigmoid_function <- function(x) 1/(1+exp(-x))
generate_outcomes <- function(predictors, parameters, sample_size) {
Pr_success <- sigmoid_function( predictors%*%parameters ) # compute Pr(Y=1 | X=x)
outcomes <- rbern( n=sample_size, prob=Pr_success ) # draw from corresponding Bernoulli distribution
return (outcomes)
}
## TEST SCRIPT
path = "D:/brian/Documents/EUR/19-20 Business Analytics and QM/Block 3/Seminar Case Studies/Git/Seminar"
setwd(path)
source_data = read.csv("./cleaned_unified_sample.csv")
load("./simulated_target_population.RData")
constant = rep(1, nrow(simulated_population))
sim_target_variables = list()
sim_target_variables$predictors = cbind(constant, simulated_population)
subsamples = split_sample(source_data)
target_sample = subsamples$target
true_target_variables = create_predictors_responses(target_sample)
logit.target.familiarity <- glm( true_target_variables$familiarity
~ true_target_variables$predictors,
family=binomial(link="logit") )
logit.target.awareness <- glm( true_target_variables$awareness
~ true_target_variables$predictors,
family=binomial(link="logit") )
logit.target.consideration <- glm( true_target_variables$consideration
~ true_target_variables$predictors,
family=binomial(link="logit") )
sim_target_variables$familiarity = generate_outcomes(simulated_population,
logit.target.familiarity$coefficients,
nrow(simulated_population))
sim_target_variables$awareness = generate_outcomes(simulated_population,
logit.target.awareness$coefficients,
nrow(simulated_population))
sim_target_variables$consideration = generate_outcomes(simulated_population,
logit.target.consideration$coefficients,
nrow(simulated_population))
sim_target_variables$familiarity = generate_outcomes(sim_target_variables$predictors,
logit.target.familiarity$coefficients,
nrow(simulated_population))
sim_target_variables$awareness = generate_outcomes(sim_target_variables$predictors,
logit.target.awareness$coefficients,
nrow(simulated_population))
sim_target_variables$consideration = generate_outcomes(sim_target_variables$predictors,
logit.target.consideration$coefficients,
nrow(simulated_population))
for ( kpi in c("familiarity", "awareness", "consideration") ) {
print( paste("True mean of ", kpi, ": ", sim_target_variables$kpi) )
}
for ( kpi in c("familiarity", "awareness", "consideration") ) {
print( paste("True mean of", kpi, ":", mean(sim_target_variables$kpi)) )
for ( kpi in c("familiarity", "awareness", "consideration") ) {
print( paste("True mean of", kpi, ":", mean(sim_target_variables$kpi)) )
}
ssdfasdsjk
}
for ( kpi in c("familiarity", "awareness", "consideration") ) {
print( paste("True mean of", kpi, ":", mean(sim_target_variables$kpi)) )
}
mean(sim_target_variables$familiarity)
for ( kpi in c("familiarity", "awareness", "consideration") ) {
kpi_mean = mean(sim_target_variables$kpi)
print( paste("True mean of", kpi, ":", kpi_mean) )
}
for ( kpi in c("familiarity", "awareness", "consideration") ) {
kpi_mean = as.numeric(mean(sim_target_variables$kpi))
print( paste("True mean of", kpi, ":", kpi_mean) )
}
as.numeric(mean(sim_target_variables$kpi))
as.numeric(mean(sim_target_variables$familiarity))
for ( kpi in c(familiarity, awareness, consideration) ) {
kpi_mean = as.numeric(mean(sim_target_variables$kpi))
print( paste("True mean of", String(kpi), ":", kpi_mean) )
}
test = "hi"
test[2:]
test = "hello world"
test[2:]
test[2:,]
test(2:)
substr(test, 2)
substr(test, 2, len(test))
substr(test, 2, length(test))
test
substr(test, 1, length(test))
length(test)
substring(test, 2)
length("sim_target_variables$")
for ( kpi in c(sim_target_variables$familiarity,
sim_target_variables$awareness,
sim_target_variables$consideration) ) {
kpi_mean = as.numeric(mean(kpi))
print( paste("True mean of", substring( String(kpi), 18), ":", kpi_mean) )
}
for ( kpi in c(sim_target_variables$familiarity,
sim_target_variables$awareness,
sim_target_variables$consideration) ) {
kpi_mean = as.numeric(mean(kpi))
print( paste("True mean of", substring( toString(kpi), 18), ":", kpi_mean) )
}
for ( kpi in c(sim_target_variables$familiarity,
sim_target_variables$awareness,
sim_target_variables$consideration) ) {
kpi_mean = as.numeric(mean(kpi))
kpi_name = toString(kpi)
print( paste("True mean of", substring( kpi_name, 18), ":", kpi_mean) )
}
for ( kpi in c(sim_target_variables$familiarity,
sim_target_variables$awareness,
sim_target_variables$consideration) ) {
kpi_mean = mean(kpi)
kpi_name = toString(kpi)
print( paste("True mean of", substring( kpi_name, 18), ":", kpi_mean) )
}
print( paste("True mean of familiarity:", mean(sim_target_variables$familiarity)) )
print( paste("True mean of awareness:", mean(sim_target_variables$awareness)) )
print( paste("True mean of consideration:", mean(sim_target_variables$consideration)) )
print( paste("True mean of familiarity:", mean(true_target_variables$familiarity)) )
print( paste("True mean of awareness:", mean(true_target_variables$awareness)) )
print( paste("True mean of consideration:", mean(true_target_variables$consideration)) )
print( paste("Simulated mean of familiarity:", mean(sim_target_variables$familiarity)) )
print( paste("Simulated mean of awareness:", mean(sim_target_variables$awareness)) )
print( paste("Simulated mean of consideration:", mean(sim_target_variables$consideration)) )
set.seed(200127)
library(mvtnorm)
library(simcausal)
library(dplyr)
## SETUP ##
split_sample <- function(data,
target_gender_m=TRUE, # target audience M/F? M = TRUE
min_age=25, # min_age and max_age are INCLUSIVE
max_age=34) {
if (target_gender_m==TRUE) {target_gender="male"} else {target_gender="female"}
target_sample = data[ ( data["sd_gender"]==target_gender
& data["sd_age"]>=min_age
& data["sd_age"]<=max_age ), ]
nontarget_sample = setdiff(data, target_sample)
out = list(); out$target = target_sample; out$nontarget = nontarget_sample
return (out)
}
## EXPLANATORY VARIABLES / PREDICTORS ##
create_predictors_responses <- function(subsample) {
# Extract columns of interest
df_contacts = subsample[,93:182]
v_familiarity = subsample[,22]
v_awareness = subsample[,23]
v_consideration = subsample[,24]
# Sum across categories
v_audiosum = rowSums(df_contacts[,1:5])
v_digitalsum = rowSums(df_contacts[,6:12])
v_programsum = df_contacts[,13]
v_tvsum = rowSums(df_contacts[,14:81])
v_vodsum = rowSums(df_contacts[,82:89])
v_yousum = df_contacts[,90]
# Return single argument with predictor and response values
out = list()
out$predictors = cbind(v_audiosum, v_digitalsum, v_programsum, v_tvsum,
v_vodsum, v_yousum)
out$familiarity = v_familiarity
out$awareness = v_awareness
out$consideration = v_consideration
return(out)
}
## ESTIMATE PARAMETERS FOR DGP ##
estimate_params <- function(true_predictors, true_outcomes) {
logit <- glm( true_outcomes ~ true_predictors, family=binomial(link="logit") )
true_params <- logit_real_data$coefficients[,1]
return (true_params)
}
## DEPENDENT VARIABLES / OUTCOMES ##
sigmoid_function <- function(x) 1/(1+exp(-x))
generate_outcomes <- function(predictors, parameters, sample_size) {
Pr_success <- sigmoid_function( predictors%*%parameters ) # compute Pr(Y=1 | X=x)
outcomes <- rbern( n=sample_size, prob=Pr_success ) # draw from corresponding Bernoulli distribution
return (outcomes)
}
## TEST SCRIPT
path = "D:/brian/Documents/EUR/19-20 Business Analytics and QM/Block 3/Seminar Case Studies/Git/Seminar"
setwd(path)
source_data = read.csv("./cleaned_unified_sample.csv")
load("./simulated_target_population.RData")
simulated_population = sample(simulated_population, 1000)
constant = rep(1, nrow(simulated_population))
sim_target_variables = list()
sim_target_variables$predictors = cbind(constant, simulated_population)
subsamples = split_sample(source_data)
target_sample = subsamples$target
true_target_variables = create_predictors_responses(target_sample)
logit.target.familiarity <- glm( true_target_variables$familiarity
~ true_target_variables$predictors,
family=binomial(link="logit") )
logit.target.awareness <- glm( true_target_variables$awareness
~ true_target_variables$predictors,
family=binomial(link="logit") )
logit.target.consideration <- glm( true_target_variables$consideration
~ true_target_variables$predictors,
family=binomial(link="logit") )
sim_target_variables$familiarity = generate_outcomes(sim_target_variables$predictors,
logit.target.familiarity$coefficients,
nrow(simulated_population))
sim_target_variables$awareness = generate_outcomes(sim_target_variables$predictors,
logit.target.awareness$coefficients,
nrow(simulated_population))
sim_target_variables$consideration = generate_outcomes(sim_target_variables$predictors,
logit.target.consideration$coefficients,
nrow(simulated_population))
print( paste("True mean of familiarity:", mean(true_target_variables$familiarity)) )
print( paste("True mean of awareness:", mean(true_target_variables$awareness)) )
print( paste("True mean of consideration:", mean(true_target_variables$consideration)) )
print( paste("Simulated mean of familiarity:", mean(sim_target_variables$familiarity)) )
print( paste("Simulated mean of awareness:", mean(sim_target_variables$awareness)) )
print( paste("Simulated mean of consideration:", mean(sim_target_variables$consideration)) )
nrow(simulated_population)
constant = rep( 1, max(nrow(simulated_population), ncol(simulated_population)) )
nrow(simulated_population)
ncol(simulated_population)
set.seed(200127)
library(mvtnorm)
library(simcausal)
library(dplyr)
## SETUP ##
split_sample <- function(data,
target_gender_m=TRUE, # target audience M/F? M = TRUE
min_age=25, # min_age and max_age are INCLUSIVE
max_age=34) {
if (target_gender_m==TRUE) {target_gender="male"} else {target_gender="female"}
target_sample = data[ ( data["sd_gender"]==target_gender
& data["sd_age"]>=min_age
& data["sd_age"]<=max_age ), ]
nontarget_sample = setdiff(data, target_sample)
out = list(); out$target = target_sample; out$nontarget = nontarget_sample
return (out)
}
## EXPLANATORY VARIABLES / PREDICTORS ##
create_predictors_responses <- function(subsample) {
# Extract columns of interest
df_contacts = subsample[,93:182]
v_familiarity = subsample[,22]
v_awareness = subsample[,23]
v_consideration = subsample[,24]
# Sum across categories
v_audiosum = rowSums(df_contacts[,1:5])
v_digitalsum = rowSums(df_contacts[,6:12])
v_programsum = df_contacts[,13]
v_tvsum = rowSums(df_contacts[,14:81])
v_vodsum = rowSums(df_contacts[,82:89])
v_yousum = df_contacts[,90]
# Return single argument with predictor and response values
out = list()
out$predictors = cbind(v_audiosum, v_digitalsum, v_programsum, v_tvsum,
v_vodsum, v_yousum)
out$familiarity = v_familiarity
out$awareness = v_awareness
out$consideration = v_consideration
return(out)
}
## ESTIMATE PARAMETERS FOR DGP ##
estimate_params <- function(true_predictors, true_outcomes) {
logit <- glm( true_outcomes ~ true_predictors, family=binomial(link="logit") )
true_params <- logit_real_data$coefficients[,1]
return (true_params)
}
## DEPENDENT VARIABLES / OUTCOMES ##
sigmoid_function <- function(x) 1/(1+exp(-x))
generate_outcomes <- function(predictors, parameters, sample_size) {
Pr_success <- sigmoid_function( predictors%*%parameters ) # compute Pr(Y=1 | X=x)
outcomes <- rbern( n=sample_size, prob=Pr_success ) # draw from corresponding Bernoulli distribution
return (outcomes)
}
path = "D:/brian/Documents/EUR/19-20 Business Analytics and QM/Block 3/Seminar Case Studies/Git/Seminar"
setwd(path)
source_data = read.csv("./cleaned_unified_sample.csv")
load("./simulated_target_population.RData")
simulated_population = simulated_population[1:1000,]
constant = rep( 1, max(nrow(simulated_population), ncol(simulated_population)) )
sim_target_variables = list()
sim_target_variables$predictors = cbind(constant, simulated_population)
subsamples = split_sample(source_data)
target_sample = subsamples$target
true_target_variables = create_predictors_responses(target_sample)
logit.target.familiarity <- glm( true_target_variables$familiarity
~ true_target_variables$predictors,
family=binomial(link="logit") )
logit.target.awareness <- glm( true_target_variables$awareness
~ true_target_variables$predictors,
family=binomial(link="logit") )
logit.target.consideration <- glm( true_target_variables$consideration
~ true_target_variables$predictors,
family=binomial(link="logit") )
sim_target_variables$familiarity = generate_outcomes(sim_target_variables$predictors,
logit.target.familiarity$coefficients,
nrow(simulated_population))
sim_target_variables$awareness = generate_outcomes(sim_target_variables$predictors,
logit.target.awareness$coefficients,
nrow(simulated_population))
sim_target_variables$consideration = generate_outcomes(sim_target_variables$predictors,
logit.target.consideration$coefficients,
nrow(simulated_population))
print( paste("True mean of familiarity:", mean(true_target_variables$familiarity)) )
print( paste("True mean of awareness:", mean(true_target_variables$awareness)) )
print( paste("True mean of consideration:", mean(true_target_variables$consideration)) )
print( paste("Simulated mean of familiarity:", mean(sim_target_variables$familiarity)) )
print( paste("Simulated mean of awareness:", mean(sim_target_variables$awareness)) )
print( paste("Simulated mean of consideration:", mean(sim_target_variables$consideration)) )
q()
